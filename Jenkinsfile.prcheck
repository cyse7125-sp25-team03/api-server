void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent any
    
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    environment {
        GITHUB_CHECK_NAME = "pr-checks-api-server"
    }
    stages {
        stage('Initialize Build') {
            steps {
               
                    setBuildStatus("Build is starting...'", "PENDING");
                
            }
        }
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }
        
        stage('PR Validation') {
            steps {
                script {
                    echo "This is a PR validation for PR#${env.CHANGE_ID}"
                    sh 'docker build --no-cache -t test-build .'
                }
            }
        }
    }    
    
    post {
        success {
            
                setBuildStatus("Build succeeded'", "SUCCESS");
            
        }
        failure {
            
                setBuildStatus("Build failed'", "FAILURE");
        }
        always {
            cleanWs()
        }
    }
}