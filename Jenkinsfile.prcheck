pipeline {
    agent any
    
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    environment {
        GITHUB_CHECK_NAME = "pr-checks-api-server"
    }
    stages {
        stage('Initialize Build') {
            steps {
                script {
                    githubNotify context: env.GITHUB_CHECK_NAME, status: 'PENDING', description: 'Build is starting...'
                }
            }
        }
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }
        
        stage('PR Validation') {
            steps {
                script {
                    echo "This is a PR validation for PR#${env.CHANGE_ID}"
                    sh 'docker build --no-cache -t test-build .'
                }
            }
        }
    }    
    
    post {
        success {
            script {
                githubNotify context: env.GITHUB_CHECK_NAME, status: 'SUCCESS', description: 'Build and tests passed!'
            }
        }
        failure {
            script {
                githubNotify context: env.GITHUB_CHECK_NAME, status: 'FAILURE', description: 'Build or tests failed!'
        }
        }
        always {
            cleanWs()
        }
    }
}